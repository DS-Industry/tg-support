const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();
const moment = require('moment-timezone');
const { Pool } = require('pg');

const API_KEY_BOT = process.env.API_KEY_BOT;
const BITRIX_URL = process.env.BITRIX_URL;
const usersWithMenu = [Number(process.env.ADMIN)];
let surveyStates = new Map();

const connection = new Pool({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME
});

connection.query('CREATE TABLE IF NOT EXISTS MESSAGE (ID SERIAL PRIMARY KEY, REQUEST_ID INTEGER, SENDER TEXT, DATE TIMESTAMP, TEXT TEXT)');
connection.query('CREATE TABLE IF NOT EXISTS REQUEST (ID SERIAL PRIMARY KEY, CLIENT_ID TEXT, DATE TIMESTAMP, STATUS TEXT, TYPE TEXT, DESCRIPTION TEXT, CLIENT_NAME TEXT, CLIENT_USERNAME TEXT, COMMUNICATION_MODE INTEGER)');
connection.query('CREATE TABLE IF NOT EXISTS PHOTO (ID SERIAL PRIMARY KEY, OWNER_ID INTEGER, TYPE TEXT, URL TEXT)');

const bot = new TelegramBot(API_KEY_BOT, {
    polling: true
})
bot.on("polling_error", err => console.log(err.data.error.message));
const commands = [
    {
        command: "start",
        description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    },
    {

        command: "help",
        description: "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏"

    },
]

bot.setMyCommands(commands);

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async msg => {
    try {
        if(msg.text === '/start') {                                                                     //–ó–∞–ø—É—Å–∫
            if (usersWithMenu.includes(msg.chat.id)){                                                   //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω
                await menuAdminMainFixed(msg.chat.id, '     –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –ú–æ–π–∫–∞ DS! üöô‚ú®')
            } else {
                await menuMainFixed(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ –ú–æ–π–∫–∞ DS! üöô‚ú® –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã ‚Äì –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üí¨üõ†Ô∏è')
            }
        } else if(msg.text === '/help') {                                                               //–ó–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏
            if (usersWithMenu.includes(msg.chat.id)){
                await sendMessageWithRetry(msg.chat.id, `     –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ–±—Ä–∞—â–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:`)
                await sendMessageWithRetry(msg.chat.id, `1) <u>–ü–æ–∏—Å–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞—â–µ–Ω–∏–π</u> —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:\n     <b>–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É.</b> –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞;\n     <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.</b> –ö —Å—Ç—Ä–æ–∫–µ —á–∞—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–Ω—é: <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b> - –æ–±—Ä–∞—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ; <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b> - –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–∫—Ä—ã—Ç–æ". –ü—Ä–∏ —Ç–∞–∫–æ–º –ø–æ–∏—Å–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ 3 —à—Ç –∑–∞ —Ä–∞–∑ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è.\n     –î–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –∑–∞—Ç—è–Ω—É—Ç—å—Å—è.`)
                await sendMessageWithRetry(msg.chat.id, `2) <u>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é</u> —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:\n     <b>–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.</b> –ú–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º;\n     <b>–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å".</b> –ö–Ω–æ–ø–∫–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n     –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–æ–∂–¥–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–∞ —Ä–∞–∑. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ.`)
                await sendMessageWithRetry(msg.chat.id, `3) <u>–ò–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è:</u>\n     –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é. –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ <b>"–ó–∞–∫—Ä—ã—Ç–æ"</b>, –∫ –¥–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.`)
                await sendMessageWithRetry(msg.chat.id, `4) <u>–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é:</u>\n     –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é.`)
                await sendMessageWithRetry(msg.chat.id, `     –ó–∞–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ, —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.`)
            } else {
                await sendMessageWithRetry(msg.chat.id, `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥—Ä–µ–∂–∫–∏ –ú–æ–π–ö–∞ DSüíßüöô\n`)
                await sendMessageWithRetry(msg.chat.id, `‚ùì–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º, –≤–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É! –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ—à–ª—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –¥–∞–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –Ω–∏–º.`)
                await sendMessageWithRetry(msg.chat.id, `–ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –∑–∞—è–≤–∫—É –∏ –¥–∞–¥—É—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—åüí™`)
            }
        } else if (msg.text === '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã' && usersWithMenu.includes(msg.chat.id)){             //–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
            await adminRequest(msg.chat.id, 0, 0)
        } else if (msg.text === '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã' && usersWithMenu.includes(msg.chat.id)){          //–í—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
            await adminRequest(msg.chat.id, 0, 1)
        } else if (msg.text === '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' && usersWithMenu.includes(msg.chat.id)){          //–í—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
            await makeNewsletter()
        } else if (msg.text === '‚úè –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å'){
            surveyStates.set(msg.chat.id, true);                                                             //–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const ch = await getCommunicationMode(msg.chat.id)
            if(ch !== 0){await changeCommunicationMode(ch, 0)}
            await addRequestType(msg.chat.id);
        }else if (msg.text === 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã'){                                      //–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await requestHistory(msg.chat.id, msg.from.id);
        }else if (msg.chat.id === usersWithMenu[0] && isNumeric(msg.text)){                              //–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ id –¥–ª—è –∞–¥–º–∏–Ω–∞
            const sql = 'SELECT * FROM request WHERE id = $1';
            await connection.query(sql, [msg.text], async (err, result) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err);
                } else {
                    if (result.rows.length > 0) {
                        const row = result.rows[0];
                        await showAdminRequest(
                            msg.chat.id,
                            msg.text,
                            row.status,
                            row.client_name,
                            row.type,
                            row.description,
                            row.client_username,
                            row.date
                        );
                    } else {
                        await sendMessageWithRetry(msg.chat.id, `<i>–ó–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç—É.</i>`);
                    }
                }
            });
        }else if (msg.chat.id !== usersWithMenu[0] && !surveyStates.get(msg.chat.id) && !isNumeric(msg.text)){
            const ch = await getCommunicationMode(msg.chat.id)
            if(ch === 0){
                await sendMessageWithRetry(msg.chat.id, `<i>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.</i>`)
            } else {await communicationMode(msg.chat.id, ch, msg)}
        }
    }
    catch(error) {
        console.log(error);
    }
})

bot.on('photo', async msg => {
    try {
        if (msg.chat.id !== usersWithMenu[0] && !surveyStates.get(msg.chat.id)){
            const ch = await getCommunicationMode(msg.chat.id)
            if(ch === 0){
                await sendMessageWithRetry(msg.chat.id, `<i>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.</i>`)
            } else {await communicationMode(msg.chat.id, ch, msg)}
        }
    }
    catch(error) {
        console.log(error);
    }
})

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const action = callbackQuery.data;
    console.log(action)
    if (action === 'requestHistory') {                                                                   //–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await requestHistory(callbackQuery.message.chat.id, callbackQuery.from.id);
    } else if (action[0] === 'a' && action[3] === 'C') {                                                 //–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø—Ä–æ—Å—É
        const data = callbackQuery.data.split(':');
        await sendComment(callbackQuery.message.chat.id, data[1]);
    } else if (action[0] === 'h' && action[7] === 'C') {                                                 //–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        const data = callbackQuery.data.split(':');
        await viewComment(callbackQuery.message.chat.id, data[1]);
    } else if (action[0] === 'a' && action[5] === 'R') {                                                 //–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const data = callbackQuery.data.split(':');
        await adminRequest(callbackQuery.message.chat.id, data[1], data[2]);
    } else if (action[0] === 'r' && action[7] === 'T') {                                                 //–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞—â–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const data = callbackQuery.data.split(':');
        await addRequestDescription(callbackQuery.message.chat.id, data[1]);
    } else if (action[0] === 'c' && action[13] === 'M') {                                                //–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const data = callbackQuery.data.split(':');
        const ch = await getCommunicationMode(callbackQuery.message.chat.id)
        if(Number(data[1]) === ch){
            await sendMessageWithRetry(callbackQuery.message.chat.id, `<i>–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.</i>`);
        } else {
            await changeCommunicationMode(ch, 0)
            await changeCommunicationMode(data[1], 1)
            await sendMessageWithRetry(callbackQuery.message.chat.id, `<i>–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${data[1]}.</i>`)
        }
    } else if (action[0] === 'c' && action[6] === 'A' && action[11] === 'S') {                            //–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        const data = callbackQuery.data.split(':');
        await bot.sendMessage(callbackQuery.message.chat.id, `–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${data[1]}: `);
        bot.once('message', async (msg) => {
            const sql = 'UPDATE request SET status = $1 WHERE id = $2 ';
            await connection.query(sql, [msg.text, data[1]], async (err) => {
                if (err) {
                    console.log(err);
                }
                await sendMessageWithRetry(msg.chat.id, `<i>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω</i>`);
                await changeCommunicationMode(data[1], 0)
                if (msg.text === '–ó–∞–∫—Ä—ã—Ç–æ') {
                    const sqlClient = 'SELECT client_id FROM request WHERE id = $1';
                    await connection.query(sqlClient, [data[1]], async (err, result) => {
                        if (err) {
                            console.log(err);
                        }
                        const clientID = result.rows[0].client_id;
                        await sendMessageWithRetry(clientID, `<i>–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–µ–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ ${data[1]} –≤ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö. –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.</i>`);
                    });
                }
            });
        });
    }
});

//–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —á–∏—Å–ª–æ
function isNumeric(str) {
    if (typeof str != "string") return false // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    return !isNaN(str) && !isNaN(parseFloat(str)) // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º
}

//–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å options –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
async function sendMessageWithRetry(chatId, messageText, retryCount = 3) {
    const options = {
        parse_mode: "HTML"
    };
    try {
        await bot.sendMessage(chatId, messageText, options);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if (retryCount > 0) {
            console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${retryCount}`);
            await sendMessageWithRetry(chatId, messageText, retryCount - 1);
        } else {
            console.error('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
        }
    }
}

//–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
async function formatDate(dateString){
    const date = new Date(dateString);

    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0'); // –ü–ª—é—Å 1, —Ç–∞–∫ –∫–∞–∫ –º–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const year = date.getFullYear();

    return `${day}.${month}.${year}`;
}

//–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function getCommunicationMode(clientId) {
    return new Promise(async (resolve, reject) => {
        const sql = 'SELECT * FROM request WHERE client_id = $1 AND communication_mode = 1';
        await connection.query(sql, [clientId], async (err, result) => {
            if (err) {
                reject(err);
            } else {
                if (result.rows.length > 0) {
                    resolve(result.rows[0].id);
                } else {
                    resolve(0);
                }
            }
        });
    });
}
async function changeCommunicationMode(requestId, communicationMode){
    const sql = 'UPDATE request SET communication_mode = $1 WHERE id = $2 ';
    await connection.query(sql, [communicationMode, requestId], async (err) => {
        if (err) {
            console.log(err);
        }
    });
}

async function getAllClient(){
    const sql = 'SELECT DISTINCT CLIENT_ID FROM request';
    return new Promise(async (resolve, reject) => {
         await connection.query(sql, async (err, result) => {
            if (err) {
                console.log(err);
                reject(err);
            } else {
                const clientIds = result.rows.map(row => row.client_id);
                resolve(clientIds);
            }
        });
    });
}

//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –ë–î
async function addPhoto(owner_id, type, url){
    const sql = 'INSERT INTO photo(owner_id, type, url) VALUES($1, $2, $3)';
    await connection.query(sql, [owner_id, type, url], async (err) => {
        if (err) console.log(err);
    });
}

//–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendPhoto(chatId, requestId, status){
    console.log(chatId, requestId, status)
    const sqlPhoto = 'SELECT * FROM photo WHERE owner_id = $1 AND type = $2';
    const photoResults = await new Promise(async (resolve, reject) => {
        await connection.query(sqlPhoto, [requestId, status], async (err, results) => {
            console.log(results)
            if (err) {
                reject(err);
            } else {
                resolve(results);
            }
        });
    });
    if (photoResults.rows.length > 0) {
        await bot.sendPhoto(chatId, photoResults.rows[0].url, { caption: "–ü—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ." });
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    }
}

//–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function  menuMainFixed(chatId, text){
    await bot.sendMessage(chatId, text, {
            reply_markup: {
                keyboard: [
                    [
                        '‚úè –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å',
                        'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã'
                    ]
                ],
                resize_keyboard: true
            }
        }
    )
}

//–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞
async function menuAdminMainFixed(chatId, text){
    await bot.sendMessage(chatId,
        `${text} –ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π.`, {
            reply_markup: {
                keyboard: [
                    [
                        '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
                        '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
                    ], [
                        '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'
                    ]
                ],
                resize_keyboard: true
            }
        }
    )
}

//–í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function menuAdminRequestActive(chatId, text){
    await bot.sendMessage(chatId,
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${text}:`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {text: '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: `addComment:${text}`}],
                        [{text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', callback_data: `historyComment:${text}`}],
                        [{text: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞', callback_data: `changeAdminStatus:${text}`}
                    ]
                ]
            }
        }
    )
}

//–í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function menuAdminRequestClose(chatId, text){
    await bot.sendMessage(chatId,
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${text}:`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', callback_data: `historyComment:${text}`}
                    ]
                ]
            }
        }
    )
}

//–í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
async function addRequestType(chatId){
    await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: `,  {
        reply_markup: {
            inline_keyboard: [
                [{text: '‚öô –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏', callback_data: `requestType:1`}],
                [{text: 'üìí –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', callback_data: `requestType:2`}],
                [{text: '–ü—Ä–æ—á–µ–µ', callback_data: `requestType:3`}]
            ]
        }
    });
}

//–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
async function addRequestDescription(chatId, typeRequest){
    let data = [];
    if (typeRequest === '1'){
        data.push('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏')
    } else if (typeRequest === '2'){
        data.push('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')
    } else {
        data.push('–ü—Ä–æ—á–µ–µ')
    }
    await sendMessageWithRetry(chatId, `–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–ºüí¨\n –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüì∑`);
    bot.once('message', async (msg) => {
        if (msg.photo && msg.photo.length > 0) {
            if (msg.caption !== undefined) {
                data.push(msg.caption)
            } else {
                data.push('–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.')
            }
        } else {
            data.push(msg.text)
        }
        const currentDate = new Date().toISOString().slice(0, 19).replace('T', ' ');
        const currentHour = moment().tz('Europe/Moscow').hours();
        const sql = 'INSERT INTO REQUEST (client_id, date, status, type, description, client_name, client_username, communication_mode) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id';
        const values = [
            msg.chat.id,
            currentDate,
            "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            data[0],
            data[1],
            msg.chat.first_name,
            msg.chat.username,
            1
        ];

        await connection.query(sql, values, async (err, result) => {
            if (err) {
                console.log(err);
            } else {
                const insertId = result.rows[0].id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏

                if (currentHour >= 8 && currentHour < 17) {
                    await sendMessageWithRetry(msg.chat.id, `–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –∏ —É–∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏‚ö°‚ö°‚ö°\n–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: ${insertId}, –æ–∂–∏–¥–∞–π—Ç–µ‚ò∫`);
                } else {
                    await sendMessageWithRetry(msg.chat.id, `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω, –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –∑–∞–≤—Ç—Ä–∞‚≠ê\n–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: ${insertId}, –æ–∂–∏–¥–∞–π—Ç–µ‚ò∫`);
                }
                await sendMessageWithRetry(msg.chat.id, `–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—Å–µ, —á—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –ø–æ –¥—Ä—É–≥–æ–º—É –∑–∞–ø—Ä–æ—Å—É, —Ç–æ —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –≤ –º–µ–Ω—é –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–πüì©`);

                if (msg.photo && msg.photo.length > 0) {
                    await addPhoto(insertId, 'request', msg.photo[msg.photo.length - 1].file_id);
                }
                surveyStates.delete(msg.chat.id);
                await addRequestAdmin(usersWithMenu[0], insertId);
                try {
                    await axios.post(BITRIX_URL + 'tasks.task.add.json?fields[TITLE]=test&fields[RESPONSIBLE_ID]=4480')
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:', error);
                }
            }
        });
    })
}

//–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–∏–Ω—É
async function addRequestAdmin(chatId, request_id){
    const sql = 'SELECT * FROM REQUEST WHERE ID = $1';
    await connection.query(sql, [request_id], async function (err, result) {
        await sendMessageWithRetry(chatId, `<b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b>`)
        await showAdminRequest(chatId, request_id, result.rows[0].status, result.rows[0].client_name, result.rows[0].type, result.rows[0].description, result.rows[0].client_username, result.rows[0].date);
    });
}

//–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function showAdminRequest(chatId, requestId, status, clientName, type, description, clientUsername, date) {
    const formattedDate = await formatDate(date);
    const messageText = `<b>–ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</b> ${requestId}\n<b>–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: </b>${type}\n<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: </b>${formattedDate}\n<b>–°—Ç–∞—Ç—É—Å: </b>${status}\n<b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: </b>${clientName}\n<b>–ù–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞: </b>${clientUsername}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>${description}\n`;

    await sendMessageWithRetry(chatId, messageText);
    await sendPhoto(chatId, requestId, "request");

    if(status === '–ó–∞–∫—Ä—ã—Ç–æ'){
        await menuAdminRequestClose(chatId, requestId)
    } else {
        await menuAdminRequestActive(chatId, requestId);
    }
}

//–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
async function requestHistory(chatId, userId){
    const sql = 'SELECT id FROM request WHERE client_id = $1 ORDER BY date';
    await connection.query(sql, [userId], async (err, results) => {
        if (err) {
            console.error(err);
            return;
        }
        if (results.rows.length > 0) {
            const ids = results.rows.map(result => result.id).join(', ');
            await sendMessageWithRetry(chatId, `<i>–ù–æ–º–µ—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${ids}</i>`);
            await sendMessageWithRetry(chatId, `<i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</i>`);
            bot.once('message', (msg) => {
                menuRequest(msg.chat.id, msg.text);
            });
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            await bot.sendMessage(chatId, '–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.')
        }
    });
}

//–í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function menuRequest(chatId, text){
    const sql = 'SELECT * FROM request WHERE client_id = $1 AND id = $2';
    await connection.query(sql, [chatId, text], async (err, result) => {
        if (result.rows.length > 0) {
            const formattedDate = await formatDate(result.rows[0].date);
            const messageText = `<b>–ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</b> ${result.rows[0].id}\n<b>–°—Ç–∞—Ç—É—Å: </b>${result.rows[0].status}\n<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: </b>${formattedDate}\n<b>–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: </b>${result.rows[0].type}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>${result.rows[0].description}\n`;
            await sendMessageWithRetry(chatId, messageText);
            if (result.rows[0].status !== '–ó–∞–∫—Ä—ã—Ç–æ'){
                await bot.sendMessage(chatId,
                    `–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è:`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üóí–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', callback_data: `historyComment:${result.rows[0].id}` }],
                                [{ text: 'üìù–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è', callback_data: `communicationMode:${result.rows[0].id}` }],
                                [{ text: 'üóÉ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'requestHistory' },]
                            ]
                        }
                    })
            } else {
                await bot.sendMessage(chatId,
                    `–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è:`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üóí–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', callback_data: `historyComment:${result.rows[0].id}` }],
                                [{ text: 'üóÉ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'requestHistory' },]
                            ]
                        }
                    })
            }
        } else {
            await bot.sendMessage(chatId, `–ó–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç—É.`);
        }
    });
}

//–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
async function adminRequest(chatId, check, checkStatus){
    let inequality = '!'
    let stringStatus = '–ê–∫—Ç–∏–≤–Ω—ã–µ'
    if (Number(checkStatus) === 1){
        inequality = ''
        stringStatus = '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'
    }
    const sql = `SELECT * FROM request WHERE status ${inequality}= $1 ORDER BY id`;
    await connection.query(sql, ["–ó–∞–∫—Ä—ã—Ç–æ"], async function (err, results) {
        if (results.rows.length > 0) {
            if (check === 0) {
                await sendMessageWithRetry(chatId, `<b>${stringStatus} –∑–∞–ø—Ä–æ—Å—ã:</b>`)
            }
            if (check !== 0) {
                check = results.rows.findIndex(item => item.id === Number(check));
            }
            let delayMs = 5000;
            for (const [index, item] of results.rows.slice(check, check+3).entries()) {
                await delay(delayMs*index); // –£–º–Ω–æ–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ 1000, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                try {
                await showAdminRequest(
                    chatId,
                    item.id,
                    item.status,
                    item.client_name,
                    item.type,
                    item.description,
                    item.client_username,
                    item.date
                );
                } catch (error) {
                    if (error.response && error.response.status === 429) {
                        delayMs += 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ 429
                    }
                }
            }
            if (check + 3 < results.rows.length) {
                await bot.sendMessage(chatId,
                    `–°–ª–µ–¥—É—é—â–∏–µ ${stringStatus} –∑–∞–ø—Ä–æ—Å—ã`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–°–º–æ—Ç—Ä–µ—Ç—å',
                                        callback_data: `adminRequest:${results.rows[check + 3].id}:${checkStatus}`
                                    }
                                ]
                            ]
                        }
                    }
                )
            } else {
                await sendMessageWithRetry(chatId, `<i>${stringStatus} –∑–∞–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.</i>`)
            }
        } else {
            await bot.sendMessage(chatId, `${stringStatus} –∑–∞–ø—Ä–æ—Å—ã –æ—Å—Ç—É—Ç—Å–≤—É—é—Ç.`);
        }
    });
}
//–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function sendComment(chatId, requestId){
    let photoId = 0;
    await sendMessageWithRetry(chatId, `<i>–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø—Ä–æ—Å—É ${requestId}:</i> `);
    bot.once('message', async (msg) => {
        let textMsg = msg.text;
        if (msg.photo && msg.photo.length > 0) {
            if (msg.caption !== undefined) {
                textMsg = msg.caption;
            } else {
                textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.';
            }
        }
        const currentDateTime = moment().tz('Europe/Moscow').format('YYYY-MM-DD HH:mm:ss');
        const sql = 'INSERT INTO message(request_id, sender, date, text) VALUES($1, $2, $3, $4) RETURNING id';
        const values = [requestId, "–û–ø–µ—Ä–∞—Ç–æ—Ä", currentDateTime, textMsg];

        await connection.query(sql, values, async (err, result) => {
            if (err) {
                console.log(err);
            }
            photoId = result.rows[0].id;
            await sendMessageWithRetry(msg.chat.id, `<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</i>`);
            if (msg.photo && msg.photo.length > 0) {
                await addPhoto(photoId, 'comment', msg.photo[msg.photo.length - 1].file_id)
            }
            if (Number(chatId) !== usersWithMenu[0]) {
                await addCommentAnswer(usersWithMenu[0], requestId, photoId, textMsg);
            } else {
                const sqlClient = 'SELECT * FROM request WHERE id = $1';
                await connection.query(sqlClient, [requestId], async (err, result) => {
                    if (err) {
                        console.log(err);
                    }
                    await addCommentAnswer(result.rows[0].client_id, requestId, photoId, textMsg)
                });
            }
        });
    });
}
//–†–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
async function communicationMode(chatId, requestId, msg){
    let photoId = 0;
        let textMsg = msg.text;
        if (msg.photo && msg.photo.length > 0) {
            if (msg.caption !== undefined){
                textMsg = msg.caption;
            } else {
                textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.';
            }
        }
        const currentDateTime = moment().tz('Europe/Moscow').format('YYYY-MM-DD HH:mm:ss');
        const sql = 'INSERT INTO message(request_id, sender, date, text) VALUES($1, $2, $3, $4) RETURNING id';
        const values = [requestId, "–ö–ª–∏–µ–Ω—Ç", currentDateTime, textMsg];

        await connection.query(sql, values, async (err, result) => {
            if (err) {
                console.log(err);
            }
            photoId = result.rows[0].id;
            if (msg.photo && msg.photo.length > 0) {
                await addPhoto(photoId, 'comment', msg.photo[msg.photo.length-1].file_id)
            }
            if (Number(chatId) !== usersWithMenu[0]) {
                await addCommentAnswer(usersWithMenu[0], requestId, photoId, textMsg);
            } else {
                const sqlClient = 'SELECT client_id FROM request WHERE id = $1';
                await connection.query(sqlClient, [requestId], async (err, result) => {
                    if (err) {
                        console.log(err);
                    }
                    await addCommentAnswer(result.rows[0].client_id, requestId, photoId, textMsg)
                });
            }
        });
}
//–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å—Ä–∞–∑—É
async function addCommentAnswer(chatId, requestId, commentId, text){
    let sender = '–ö–ª–∏–µ–Ω—Ç'
    if (Number(chatId) !== usersWithMenu[0]){
        sender = '–û–ø–µ—Ä–∞—Ç–æ—Ä'
    }
    await sendMessageWithRetry(chatId, `<b>${sender} –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø—Ä–æ—Å—É ${requestId}:</b>\n <i>${text}</i>`)
    await sendPhoto(chatId, commentId, "comment");
    if(sender === '–ö–ª–∏–µ–Ω—Ç') {
        await bot.sendMessage(chatId,
            `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç:`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `addComment:${requestId}`}
                        ]
                    ]
                }
            }
        )
    }
}

//–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é
async function viewComment(chatId, request_id){
    const sql = 'SELECT * FROM message WHERE request_id = $1 ORDER BY date';
    await connection.query(sql, [request_id], async (err, results) => {
        if (results.rows.length > 0) {
            await sendMessageWithRetry(chatId, `<b>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É ${request_id}:</b>`)
            let delayMs = 1000;
            for (const [index, item] of results.rows.entries()) {
                await delay(delayMs*index);
                console.log(item)
                try {
                    const messageText = `<b>${item.date.toLocaleString()}\n ${item.sender}:</b> \n <i>${item.text}</i>`;
                    await sendMessageWithRetry(chatId, messageText);
                    await sendPhoto(chatId, item.id, "comment");
                } catch (error) {
                    if (error.response && error.response.status === 429 && error.response.status === 428) {
                        delayMs += 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ 429
                    }
                }
            }
            await sendMessageWithRetry(chatId, `<i>–ö–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</i>`);
            if (Number(chatId) !== usersWithMenu[0]) {
                await menuRequest(chatId, request_id);
            }
        } else {
            await sendMessageWithRetry(chatId, `<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É ${request_id} –Ω–µ—Ç—É.</i>`);
            if (Number(chatId) !== usersWithMenu[0]) {
                await menuRequest(chatId, request_id);
            }
        }
    });
}

async function makeNewsletter(){
    const clients = await getAllClient()
    if(clients.length > 0){
        await sendMessageWithRetry(usersWithMenu[0], `<i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:</i>`);
        bot.once('message', async (msg) => {
            if (msg.photo && msg.photo.length > 0) {
                if (msg.caption !== undefined){
                    for (const [index, item] of clients.entries()) {
                        await bot.sendPhoto(item, msg.photo[msg.photo.length-1].file_id, { caption: msg.caption });
                    }
                } else {
                    for (const [index, item] of clients.entries()) {
                        await bot.sendPhoto(item, msg.photo[msg.photo.length-1].file_id);
                    }
                }
            } else {
                for (const [index, item] of clients.entries()) {
                    await sendMessageWithRetry(item, msg.text);
                }
            }
            await sendMessageWithRetry(usersWithMenu[0], `<i>–ì–æ—Ç–æ–≤–æ!</i>`);
        })
    } else {
        await sendMessageWithRetry(usersWithMenu[0], `<i>–ö–ª–∏–µ–Ω—Ç–æ–≤, —Å–¥–µ–ª–∞–≤—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–µ—Ç—É.</i>`);
    }
}


