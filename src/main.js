import TgMethod from "./methods/tgMethod";
import ClientMethod from "./client/clientMethod";
import AdminMethod from "./admin/adminMethod";
import bot from "./methods/connection";
import connection from "./db";
import moment from "moment-timezone";
import { differenceInDays } from 'date-fns';

const tgMethod = new TgMethod();
const clientMethod = new ClientMethod();
const adminMethod = new AdminMethod();

require('dotenv').config();

//const BITRIX_URL = process.env.BITRIX_URL;
const usersWithMenu = [Number(process.env.ADMIN)];
let surveyStates = new Map();

connection.query('CREATE TABLE IF NOT EXISTS MESSAGE (ID SERIAL PRIMARY KEY, REQUEST_ID INTEGER, SENDER TEXT, DATE TIMESTAMP, TEXT TEXT)');
connection.query('CREATE TABLE IF NOT EXISTS REQUEST (ID SERIAL PRIMARY KEY, CLIENT_ID TEXT, DATE TIMESTAMP, STATUS TEXT, TYPE TEXT, ADDRESS TEXT, DESCRIPTION TEXT, CLIENT_NAME TEXT, CLIENT_USERNAME TEXT, COMMUNICATION_MODE INTEGER)');
connection.query('CREATE TABLE IF NOT EXISTS MEDIA (ID SERIAL PRIMARY KEY, OWNER_ID INTEGER, TYPE TEXT, URL TEXT, FILLING TEXT)');

bot.on("polling_error", err => console.log(err.data.error.message));
const commands = [
    {
        command: "start",
        description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    },
    {

        command: "help",
        description: "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏"

    },
]

bot.setMyCommands(commands);

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async msg => {
    try {
        if(msg.text === '/start') {                                                                     //–ó–∞–ø—É—Å–∫
            if (usersWithMenu.includes(msg.chat.id)){                                                   //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω
                await adminMethod.menuAdminMainFixed(msg.chat.id, '     –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –ú–æ–π–∫–∞ DS! üöô‚ú®')
            } else {
                await clientMethod.menuMainFixed(msg.chat.id, '     üöô‚ú®–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ –ú–æ–π–∫–∞ DS!\n     –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ–±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —è –ø–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã!\n     –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é.üí¨üõ†Ô∏è')
            }
        } else if(msg.text === '/help') {                                                               //–ó–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏
            if (usersWithMenu.includes(msg.chat.id)){
                await tgMethod.sendMessageWithRetry(msg.chat.id, `     –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ–±—Ä–∞—â–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:`)
                await tgMethod.sendMessageWithRetry(msg.chat.id, `1) <u>–ü–æ–∏—Å–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞—â–µ–Ω–∏–π</u> —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:\n     <b>–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É.</b> –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞;\n     <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.</b> –ö —Å—Ç—Ä–æ–∫–µ —á–∞—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–Ω—é: <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b> - –æ–±—Ä–∞—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ; <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b> - –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–∫—Ä—ã—Ç–æ". –ü—Ä–∏ —Ç–∞–∫–æ–º –ø–æ–∏—Å–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ 3 —à—Ç –∑–∞ —Ä–∞–∑ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è.\n     –î–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –∑–∞—Ç—è–Ω—É—Ç—å—Å—è.`)
                await tgMethod.sendMessageWithRetry(msg.chat.id, `2) <u>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é</u> —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:\n     <b>–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.</b> –ú–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º;\n     <b>–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å".</b> –ö–Ω–æ–ø–∫–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n     –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–æ–∂–¥–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–∞ —Ä–∞–∑. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ.`)
                await tgMethod.sendMessageWithRetry(msg.chat.id, `3) <u>–ò–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è:</u>\n     –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é. –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ <b>"–ó–∞–∫—Ä—ã—Ç–æ"</b>, –∫ –¥–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.`)
                await tgMethod.sendMessageWithRetry(msg.chat.id, `4) <u>–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é:</u>\n     –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é.`)
                await tgMethod.sendMessageWithRetry(msg.chat.id, `     –ó–∞–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ, —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.`)
            } else {
                await tgMethod.sendMessageWithRetry(msg.chat.id, `     ‚ùì–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.\n     –û–ø–µ—Ä–∞—Ç–æ—Ä –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ –≤–æ–∑—å–º–µ—Ç –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç—É!üí™`)
            }
        } else if (msg.text === '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã' && usersWithMenu.includes(msg.chat.id)){             //–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
            await adminMethod.adminRequest(msg.chat.id, 0, 0, tgMethod)
        } else if (msg.text === '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã' && usersWithMenu.includes(msg.chat.id)){          //–í—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
            await adminMethod.adminRequest(msg.chat.id, 0, 1, tgMethod)
        } else if (msg.text === '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' && usersWithMenu.includes(msg.chat.id)){             //–í—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
            await adminMethod.makeNewsletter(usersWithMenu[0], clientMethod, tgMethod)
        } else if (msg.text === '‚úè –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å'){                                                    //–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const ch = await clientMethod.getCommunicationMode(msg.chat.id)
            if(ch !== 0){
                await tgMethod.sendMessageWithRetry(msg.chat.id, `<i>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.</i>`)
            } else {
                surveyStates.set(msg.chat.id, true);
                await clientMethod.addRequestType(msg.chat.id);
            }

        } else if (msg.text === 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã'){                                      //–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await requestHistory(msg.chat.id, msg.from.id);
        } else if (msg.chat.id === usersWithMenu[0] && tgMethod.isNumeric(msg.text)){                     //–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ id –¥–ª—è –∞–¥–º–∏–Ω–∞
            await adminMethod.searchRequestById(msg.chat.id, msg.text, tgMethod);
        }else if (msg.chat.id !== usersWithMenu[0] && !surveyStates.get(msg.chat.id) && !tgMethod.isNumeric(msg.text)){
            const ch = await clientMethod.getCommunicationMode(msg.chat.id)
            if(ch === 0){
                await tgMethod.sendMessageWithRetry(msg.chat.id, `<i>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.</i>`)
            } else {await communicationMode(msg.chat.id, ch, msg)}
        }
    }
    catch(error) {
        console.log(error);
    }
})
//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const action = callbackQuery.data;
    console.log(action)
    if (action === 'requestHistory') {                                                                   //–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await requestHistory(callbackQuery.message.chat.id, callbackQuery.from.id);
    } else if (action[0] === 'a' && action[3] === 'C') {                                                 //–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø—Ä–æ—Å—É
        const data = callbackQuery.data.split(':');
        await sendComment(callbackQuery.message.chat.id, data[1]);
    } else if (action[0] === 'h' && action[7] === 'C') {                                                 //–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        const data = callbackQuery.data.split(':');
        await viewComment(callbackQuery.message.chat.id, data[1]);
    } else if (action[0] === 'a' && action[5] === 'R') {                                                 //–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const data = callbackQuery.data.split(':');
        await adminMethod.adminRequest(callbackQuery.message.chat.id, data[1], data[2], tgMethod);
    } else if (action[0] === 'r' && action[7] === 'T') {                                                 //–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞—â–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const data = callbackQuery.data.split(':');
        const dateMsg = new Date(callbackQuery.message.date * 1000).toISOString().slice(0, 19).replace('T', ' ');
        const nowMsg = new Date().toISOString().slice(0, 19).replace('T', ' ');
        const daysDifference = differenceInDays(nowMsg, dateMsg);
        if (daysDifference >= 2) {
            await tgMethod.sendMessageWithRetry(callbackQuery.message.chat.id, `<i>–î–∞–Ω–Ω–æ–µ –º–µ–Ω—é —É–∂–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.</i>`)
        } else {
            await bot.deleteMessage(callbackQuery.message.chat.id, callbackQuery.message.message_id);
            const ch = await clientMethod.getCommunicationMode(callbackQuery.message.chat.id)
            if (ch !== 0) {
                await tgMethod.sendMessageWithRetry(callbackQuery.message.chat.id, `<i>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.</i>`)
            } else {
                await addRequestAddress(callbackQuery.message.chat.id, data[1]);
            }
        }
    } else if (action[0] === 'c' && action[13] === 'M') {                                                //–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const data = callbackQuery.data.split(':');
        await clientMethod.onCommunicationMode(callbackQuery.message.chat.id, data[1], tgMethod);
    }/* else if (action[0] === 'c' && action[6] === 'A' && action[11] === 'S') {                            //–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        const data = callbackQuery.data.split(':');
        await adminMethod.changeStatusRequest(callbackQuery.message.chat.id, data[1], tgMethod, clientMethod);
    }*/ else if (action[0] === 'c' && action[5] === 'A' && action[10] === 'S') {                            //–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –Ω–∞ "–ó–∞–∫—Ä—ã—Ç–æ"
        const data = callbackQuery.data.split(':');
        await adminMethod.closeStatusRequest(callbackQuery.message.chat.id, data[1], tgMethod, clientMethod);
    }
});
//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
async function addRequestAddress(chatId, typeRequest){
    let data = [];
    if (typeRequest === '1'){
        data.push('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏')
    } else if (typeRequest === '2'){
        data.push('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')
    } else {
        data.push('–ü—Ä–æ—á–µ–µ')
    }
    await tgMethod.sendMessageWithRetry(chatId, `–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–π –∞–≤—Ç–æ–º–æ–π–∫–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É –∏ –¥–æ–ºüåè`);
    const addAddress = async (msg) => {
        if (msg.chat.id === chatId) {
            data.push(msg.text);
            bot.removeListener('message', addAddress);
            await addRequestDescription(chatId, data)
        } else {
            console.log("–û–∂–∏–¥–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞.")
        }
    }
    bot.on('message', addAddress);
}
//–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
async function addRequestDescription(chatId, data){
    await tgMethod.sendMessageWithRetry(chatId, `–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüì∑`);
    const protectionReq = async (msg) => {
        if (msg.chat.id === chatId) {
            if (msg.photo && msg.photo.length > 0) {
                if (msg.caption !== undefined) {
                    data.push(msg.caption)
                } else {
                    data.push('–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.')
                }
            } else if (msg.document) {
                if (msg.caption !== undefined) {
                    data.push(msg.caption)
                } else {
                    data.push('–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç.')
                }
            } else if (msg.video) {
                if (msg.caption !== undefined) {
                    data.push(msg.caption)
                } else {
                    data.push('–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ.')
                }
            } else if (msg.video_note) {
                data.push('–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.')
            } else if (msg.voice) {
                data.push('–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            } else {
                data.push(msg.text)
            }
            const currentDate = new Date().toISOString().slice(0, 19).replace('T', ' ');
            const currentHour = moment().tz('Europe/Moscow').hours();
            const sql = 'INSERT INTO REQUEST (client_id, date, status, type, address, description, client_name, client_username, communication_mode) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id';
            const values = [
                msg.chat.id,
                currentDate,
                "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
                data[0],
                data[1],
                data[2],
                msg.chat.first_name,
                msg.chat.username,
                1
            ];

            await connection.query(sql, values, async (err, result) => {
                if (err) {
                    console.log(err);
                } else {
                    const insertId = result.rows[0].id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏

                    if (currentHour >= 8 && currentHour < 17) {
                        await tgMethod.sendMessageWithRetry(msg.chat.id, `–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: ${insertId}, –æ–∂–∏–¥–∞–π—Ç–µ!\n–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è‚ò∫`);
                    } else {
                        await tgMethod.sendMessageWithRetry(msg.chat.id, `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω, –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –∑–∞–≤—Ç—Ä–∞‚≠ê\n–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: ${insertId}, –æ–∂–∏–¥–∞–π—Ç–µ‚ò∫`);
                    }
                    await tgMethod.sendMessageWithRetry(msg.chat.id, `–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í—Å–µ, —á—Ç–æ –Ω–∞–ø–∏—à–µ—Ç–µ —Å–µ–π—á–∞—Å, –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è!\n –î–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ –¥—Ä—É–≥–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–πüì©`);

                    if (msg.photo && msg.photo.length > 0) {
                        await tgMethod.addMedia(insertId, 'request', msg.photo[msg.photo.length - 1].file_id, 'photo');
                    } else if (msg.document) {
                        await tgMethod.addMedia(insertId, 'request', msg.document.file_id, 'doc');
                    } else if (msg.video) {
                        await tgMethod.addMedia(insertId, 'request', msg.video.file_id, 'video');
                    } else if (msg.video_note) {
                        await tgMethod.addMedia(insertId, 'request', msg.video_note.file_id, 'videoNote');
                    } else if (msg.voice) {
                        await tgMethod.addMedia(insertId, 'request', msg.voice.file_id, 'voice');
                    }
                    surveyStates.delete(msg.chat.id);
                    await adminMethod.addRequestAdmin(usersWithMenu[0], insertId, tgMethod);
                    /*try {
                        await axios.post(BITRIX_URL + 'tasks.task.add.json?fields[TITLE]=tes12t&fields[RESPONSIBLE_ID]=4480')
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:', error);
                    }*/
                }
            });
            bot.removeListener('message', protectionReq);
        } else {
            console.log("–û–∂–∏–¥–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è.")
        }
    }
    bot.on('message', protectionReq);
}
//–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
async function requestHistory(chatId, userId){
    const sql = 'SELECT id FROM request WHERE client_id = $1 ORDER BY date';
    await connection.query(sql, [userId], async (err, results) => {
        if (err) {
            console.error(err);
            return;
        }
        if (results.rows.length > 0) {
            const ids = results.rows.map(result => result.id).join(', ');
            await tgMethod.sendMessageWithRetry(chatId, `<i>–ù–æ–º–µ—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${ids}</i>`);
            await tgMethod.sendMessageWithRetry(chatId, `<i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</i>`);
            const protectionReqHist = async (msg) => {
                if (msg.chat.id === chatId) {
                    await clientMethod.menuRequest(msg.chat.id, msg.text, tgMethod);
                    bot.removeListener('message', protectionReqHist);
                } else {
                    console.log("–û–∂–∏–¥–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏.")
                }
            }
            bot.on('message', protectionReqHist);
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            await bot.sendMessage(chatId, '–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.')
        }
    });
}
//–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function sendComment(chatId, requestId){
    let mediaId = 0;
    await tgMethod.sendMessageWithRetry(chatId, `<i>–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø—Ä–æ—Å—É ${requestId}:</i> `);
    const protectionSendMes = async (msg) => {
        if (msg.chat.id === chatId) {
            let textMsg = msg.text;
            if (msg.photo && msg.photo.length > 0) {
                if (msg.caption !== undefined) {
                    textMsg = msg.caption;
                } else {
                    textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.';
                }
            } else if (msg.document) {
                if (msg.caption !== undefined) {
                    textMsg = msg.caption
                } else {
                    textMsg = '–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç.'
                }
            } else if (msg.video) {
                if (msg.caption !== undefined) {
                    textMsg = msg.caption
                } else {
                    textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ.'
                }
            } else if (msg.video_note) {
                textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.'
            } else if (msg.voice) {
                textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
            }
            const currentDateTime = moment().tz('Europe/Moscow').format('YYYY-MM-DD HH:mm:ss');
            const sql = 'INSERT INTO message(request_id, sender, date, text) VALUES($1, $2, $3, $4) RETURNING id';
            const values = [requestId, "–û–ø–µ—Ä–∞—Ç–æ—Ä", currentDateTime, textMsg];

            await connection.query(sql, values, async (err, result) => {
                if (err) {
                    console.log(err);
                }
                mediaId = result.rows[0].id;
                await tgMethod.sendMessageWithRetry(msg.chat.id, `<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</i>`);
                if (msg.photo && msg.photo.length > 0) {
                    await tgMethod.addMedia(mediaId, 'comment', msg.photo[msg.photo.length - 1].file_id, 'photo')
                } else if (msg.document) {
                    await tgMethod.addMedia(mediaId, 'comment', msg.document.file_id, 'doc');
                } else if (msg.video){
                    await tgMethod.addMedia(mediaId, 'comment', msg.video.file_id, 'video');
                } else if (msg.video_note){
                    await tgMethod.addMedia(mediaId, 'comment', msg.video_note.file_id, 'videoNote');
                } else if (msg.voice){
                    await tgMethod.addMedia(mediaId, 'comment', msg.voice.file_id, 'voice');
                }
                if (Number(chatId) !== usersWithMenu[0]) {
                    await addCommentAnswer(usersWithMenu[0], requestId, mediaId, textMsg);
                } else {
                    const sqlClient = 'SELECT * FROM request WHERE id = $1';
                    await connection.query(sqlClient, [requestId], async (err, result) => {
                        if (err) {
                            console.log(err);
                        }
                        await addCommentAnswer(result.rows[0].client_id, requestId, mediaId, textMsg)
                    });
                }
            });
            bot.removeListener('message', protectionSendMes);
        } else {
            console.log("–û–∂–∏–¥–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
        }
    }
    bot.on('message', protectionSendMes);
}
//–†–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
async function communicationMode(chatId, requestId, msg){
    let mediaId = 0;
        let textMsg = msg.text;
        if (msg.photo && msg.photo.length > 0) {
            if (msg.caption !== undefined){
                textMsg = msg.caption;
            } else {
                textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.';
            }
        } else if (msg.document) {
            if (msg.caption !== undefined) {
                textMsg = msg.caption
            } else {
                textMsg = '–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç.'
            }
        } else if (msg.video) {
            if (msg.caption !== undefined) {
                textMsg = msg.caption
            } else {
                textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ.'
            }
        } else if (msg.video_note) {
            textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.'
        } else if (msg.voice) {
            textMsg = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
        }
        const currentDateTime = moment().tz('Europe/Moscow').format('YYYY-MM-DD HH:mm:ss');
        const sql = 'INSERT INTO message(request_id, sender, date, text) VALUES($1, $2, $3, $4) RETURNING id';
        const values = [requestId, "–ö–ª–∏–µ–Ω—Ç", currentDateTime, textMsg];

        await connection.query(sql, values, async (err, result) => {
            if (err) {
                console.log(err);
            }
            mediaId = result.rows[0].id;
            if (msg.photo && msg.photo.length > 0) {
                await tgMethod.addMedia(mediaId, 'comment', msg.photo[msg.photo.length - 1].file_id, 'photo')
            } else if (msg.document) {
                await tgMethod.addMedia(mediaId, 'comment', msg.document.file_id, 'doc');
            } else if (msg.video){
                await tgMethod.addMedia(mediaId, 'comment', msg.video.file_id, 'video');
            } else if (msg.video_note){
                await tgMethod.addMedia(mediaId, 'comment', msg.video_note.file_id, 'videoNote');
            } else if (msg.voice){
                await tgMethod.addMedia(mediaId, 'comment', msg.voice.file_id, 'voice');
            }
            if (Number(chatId) !== usersWithMenu[0]) {
                await addCommentAnswer(usersWithMenu[0], requestId, mediaId, textMsg);
            } else {
                const sqlClient = 'SELECT client_id FROM request WHERE id = $1';
                await connection.query(sqlClient, [requestId], async (err, result) => {
                    if (err) {
                        console.log(err);
                    }
                    await addCommentAnswer(result.rows[0].client_id, requestId, mediaId, textMsg)
                });
            }
        });
}
//–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å—Ä–∞–∑—É
async function addCommentAnswer(chatId, requestId, commentId, text){
    let sender = '–ö–ª–∏–µ–Ω—Ç'
    if (Number(chatId) !== usersWithMenu[0]){
        sender = '–û–ø–µ—Ä–∞—Ç–æ—Ä'
    }
    await tgMethod.sendMessageWithRetry(chatId, `<b>${sender} –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø—Ä–æ—Å—É ${requestId}:</b>\n <i>${text}</i>`)
    await tgMethod.sendMedia(chatId, commentId, "comment");
    if(sender === '–ö–ª–∏–µ–Ω—Ç') {
        await bot.sendMessage(chatId,
            `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç:`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `addComment:${requestId}`}
                        ]
                    ]
                }
            }
        )
    }
}

//–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é
async function viewComment(chatId, request_id){
    const sql = 'SELECT * FROM message WHERE request_id = $1 ORDER BY date';
    await connection.query(sql, [request_id], async (err, results) => {
        if (results.rows.length > 0) {
            await tgMethod.sendMessageWithRetry(chatId, `<b>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É ${request_id}:</b>`)
            let delayMs = 1000;
            for (const [index, item] of results.rows.entries()) {
                await tgMethod.delay(delayMs*index);
                console.log(item)
                try {
                    const messageText = `<b>${item.date.toLocaleString()}\n ${item.sender}:</b> \n <i>${item.text}</i>`;
                    await tgMethod.sendMessageWithRetry(chatId, messageText);
                    await tgMethod.sendMedia(chatId, item.id, "comment");
                } catch (error) {
                    if (error.response && error.response.status === 429 && error.response.status === 428) {
                        delayMs += 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ 429
                    }
                }
            }
            await tgMethod.sendMessageWithRetry(chatId, `<i>–ö–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</i>`);
        } else {
            await tgMethod.sendMessageWithRetry(chatId, `<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É ${request_id} –Ω–µ—Ç—É.</i>`);
        }
        if (Number(chatId) !== usersWithMenu[0]) {
            await clientMethod.menuRequest(chatId, request_id, tgMethod);
        }
    });
}