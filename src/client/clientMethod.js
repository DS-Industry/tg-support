import bot from "../methods/connection";
import connection from "../db";

class ClientMethod {
    //–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async menuMainFixed(chatId, text){
        await bot.sendMessage(chatId, text, {
                reply_markup: {
                    keyboard: [
                        [
                            '‚úè –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å',
                            'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã'
                        ]
                    ],
                    resize_keyboard: true
                }
            }
        )
    }
    //–í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
    async addRequestType(chatId){
        await bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: `,  {
            reply_markup: {
                inline_keyboard: [
                    [{text: '‚öô –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏', callback_data: `requestType:1`}],
                    [{text: 'üìí –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', callback_data: `requestType:2`}],
                    [{text: '–ü—Ä–æ—á–µ–µ', callback_data: `requestType:3`}]
                ]
            }
        });
    }
    //–í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async menuRequest(chatId, text, tgMethod){
        const sql = 'SELECT * FROM request WHERE client_id = $1 AND id = $2';
        await connection.query(sql, [chatId, text], async (err, result) => {
            if (result.rows.length > 0) {
                const formattedDate = await tgMethod.formatDate(result.rows[0].date);
                const messageText = `<b>–ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</b> ${result.rows[0].id}\n<b>–°—Ç–∞—Ç—É—Å: </b>${result.rows[0].status}\n<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: </b>${formattedDate}\n<b>–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: </b>${result.rows[0].type}\n<b>–ê–¥—Ä–µ—Å –º–æ–π–∫–∏: </b>${result.rows[0].address}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>${result.rows[0].description}\n`;
                await tgMethod.sendMessageWithRetry(chatId, messageText);
                await tgMethod.sendMedia(chatId, result.rows[0].id, "request");
                if (result.rows[0].status !== '–ó–∞–∫—Ä—ã—Ç–æ'){
                    await bot.sendMessage(chatId,
                        `–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è:`, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üóí–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', callback_data: `historyComment:${result.rows[0].id}` }],
                                    [{ text: 'üìù–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è', callback_data: `communicationMode:${result.rows[0].id}` }],
                                    [{ text: 'üóÉ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'requestHistory' },]
                                ]
                            }
                        })
                } else {
                    await bot.sendMessage(chatId,
                        `–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è:`, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üóí–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', callback_data: `historyComment:${result.rows[0].id}` }],
                                    [{ text: 'üóÉ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã', callback_data: 'requestHistory' },]
                                ]
                            }
                        })
                }
            } else {
                await bot.sendMessage(chatId, `–ó–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç—É.`);
            }
        });
    }
    //–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±–æ—Ç—É
    async getAllClient(){
        const sql = 'SELECT DISTINCT CLIENT_ID FROM request';
        return new Promise(async (resolve, reject) => {
            await connection.query(sql, async (err, result) => {
                if (err) {
                    console.log(err);
                    reject(err);
                } else {
                    const clientIds = result.rows.map(row => row.client_id);
                    resolve(clientIds);
                }
            });
        });
    }
    //–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è
    async onCommunicationMode(chatId, requestId, tgMethod){
        const ch = await this.getCommunicationMode(chatId)
        if(Number(requestId) === ch){
            await tgMethod.sendMessageWithRetry(chatId, `<i>–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.</i>`);
        } else {
            await this.changeCommunicationMode(ch, 0)
            await this.changeCommunicationMode(requestId, 1)
            await tgMethod.sendMessageWithRetry(chatId, `<i>–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}.</i>`)
        }
    }
    //–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    async changeCommunicationMode(requestId, communicationMode){
        const sql = 'UPDATE request SET communication_mode = $1 WHERE id = $2 ';
        await connection.query(sql, [communicationMode, requestId], async (err) => {
            if (err) {
                console.log(err);
            }
        });
    }
    //–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è
    async getCommunicationMode(clientId) {
        return new Promise(async (resolve, reject) => {
            const sql = 'SELECT * FROM request WHERE client_id = $1 AND communication_mode = 1';
            await connection.query(sql, [clientId], async (err, result) => {
                if (err) {
                    reject(err);
                } else {
                    if (result.rows.length > 0) {
                        resolve(result.rows[0].id);
                    } else {
                        resolve(0);
                    }
                }
            });
        });
    }
}
export default ClientMethod;